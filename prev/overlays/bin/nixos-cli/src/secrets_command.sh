include awk:gawk git sed:gnused
local dir="/etc/nixos/secrets" secret

function main {

  # Get args and ensure agenix
  secret="${args[secret]}"
  has agenix || error "agenix missing"

  # Choose secret with menu
  secret="$(ask "[new] $(list_secrets)" $secret)"

  # If [new], ask for name of new secret
  if [[ "$secret" == "[new]" ]]; then
    secret="$(ask)"
  fi

  # Add (or use existing) secret by argument name
  has_secret "$secret" || add_secret "$secret"

  # Edit secret with agenix
  info "Editing secret with agenix"
  show "cd $dir && agenix --edit \"files/$secret.age\""
  cd $dir && agenix --edit "files/$secret.age"

  # Update files/default.nix
  write_files_nix 

  # Commit secrets
  git_commit

}

# Write the default.nix file compiling all age files
function write_files_nix {

  # Ouput file path 
  local nix="$dir/files/default.nix"

  info "Writing $nix"

  # Build recursive attribute set
  echo "# Do not modify this file!  It was generated by ‘nixos secrets’ " > $nix
  echo "# and may be overwritten by future invocations. "                >> $nix
  echo "# Please add age files to $dir/files/*.age "                     >> $nix
  echo "{"                                                               >> $nix
  echo ""                                                                >> $nix

  # Read each encrypted age file
  for file in $dir/files/*.age; do

    # Derive the attribute key from the filename
    local name=$(basename "$file" ".age")

    # Write the attribute name and path to default.nix
    echo "  $name = ./${name}.age;" >> $nix

  done

  # Finish 
  echo "" >> $nix
  echo "}" >> $nix

  show "echo \"{ ... }\" > $nix"

}

function list_secrets {
  local nix="$dir/secrets.nix"
  nix-instantiate --eval --expr "(import $nix)" | tr ";" "\n" | awk -F/ '{split($2, arr, "."); printf "%s ", arr[1]} END {print ""}'
}

function has_secret {
  [[ -z "$1" ]] && { return 1; }
  local nix="$dir/secrets.nix"
  local output="$(nix-instantiate --eval --expr "(import $nix).\"files/$1.age\"" 2>/dev/null)"
  [[ -z "$output" ]] && { return 1; }
  return 0
}

function add_secret {
  [[ -z "$1" ]] && { return 1; }
  local nix="$dir/secrets.nix"
  info "Appending $nix"
  task "sed -i '$ d' ${nix}"
  task "echo '  \"files/$1.age\".publicKeys = all;' >> $nix"
  task "echo '' >> $nix"
  task "echo '}' >> $nix"
}

function git_commit {
  info "Adding files to the staging area"
  task "cd $dir"\
       '&& git add ./secrets.nix ./files/*.age ./files/default.nix'
  if [[ "${args[--commit]}" == "1" ]]; then
    info "Committing staged files to the repository"
    task "cd $dir"\
         '&& git commit ./secrets.nix ./files/*.age ./files/default.nix'\
         "-m 'secret: $secret'"
  fi
}

main
